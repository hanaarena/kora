#!/usr/bin/env node

const program = require('commander')
const mkdirp = require('mkdirp')
const fs = require('fs')
const path = require('path')
const readline = require('readline')

const pkg = require('../package.json')

process.exit = exit

program
  .version(pkg.version)
  .usage('[kora] [dir]')
  .parse(process.argv)

if (!exit.exited) {
  main()
}

// Confirm whether empty dir when target dir is no empty
function confirm(msg, callback) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  })

  rl.question(msg, (input) => {
    rl.close()
    callback(/^y|yes|ok|true$/i.test(input))
  })
}

// Empty dir
function emptyDirectory(path, cb) {
  fs.readdir(path, (err, files) => {
    if (err && 'ENOENT' != err.code) {
      throw err
    }

    cb(!files || !files.length)
  })
}

// Load template file
function loadTemplate (name) {
  return fs.readFileSync(path.join(__dirname, '..', 'template', name), 'utf-8')
}

// Create folder
function mkdir(path, cb) {
  mkdirp(path, 0755, function(err){
    if (err) {
      throw err
    }

    console.log('   \033[36mcreate\033[0m : ' + path);
    cb && cb();
  });
}

// Write file
function write(path, data, permision) {
  fs.writeFileSync(path, data, {
    encoding: 'utf-8',
    mode: 0666
  })

  console.log('   \x1b[36mcreate\x1b[0m : ' + path)
}

// copy template files
function createApp (name, path) {
  process.on('exit', () => {
    console.log()
    console.log('   install dependencies & dev-dependencies:')
    console.log('     $ cd %s && npm install', path)
    console.log()
    console.log('   run the app:')
    console.log('     $ npm start')
    console.log()
  })

  const wait = 8

  console.log()

  function complete () {
    if (--wait) return
  }

  // App entry
  const app = loadTemplate('app.js')

  // Run app
  const www = loadTemplate('www')

  // route
  const index = loadTemplate('js/routes/index.js')
  const users = loadTemplate('js/routes/users.js')

  // model
  const runDB = loadTemplate('js/models/run.js')
  const userModel = loadTemplate('js/models/User.js')

  // view
  const layoutView = loadTemplate('views/layout.' + program.template)
  const indexView = loadTemplate('views/index.' + program.template)
  const errorView = loadTemplate('views/error.' + program.template)

  // CSS
  const css = loadTemplate('css/style.css')

	// JS
  const js = loadTemplate('js/public/javascripts/src/index.js')

  // test
  const defaultTest = loadTemplate('js/test/app.spec.js')

  mkdir(path, () => {
    mkdir(path + '/public')
    mkdir(path + '/public/javascripts')
    mkdir(path + '/public/javascripts/src', () => {
      write(path + '/public/javascripts/src/index.js', js)

      complete()
    })
    mkdir(path + '/public/images')
    mkdir(path + '/public/style', () => {
      write(path + '/public/style/style.css', css)

      complete()
    })
  })

  mkdir(path + '/routes', () => {
    write(path + '/routes/index.js', index)
    write(path + '/routes/users.js', users)

    complete()
  })

  mkdir(path + '/models', () => {
    write(path + '/models/run.js', runDB)
    write(path + '/models/User.js', userModel)

    complete()
  })

  mkdir(path + '/test', () => {
    write(path + '/test/app.spec.js', defaultTest)

    complete()
  })

  mkdir(path + '/views', () => {
    write(path + '/views/index.' + program.template, indexView)
    write(path + '/views/layout.' + program.template, layoutView)
    write(path + '/views/error.' + program.template, errorView)

    complete()
  })

  // Template support
  app = app.replace('{views}', program.template)

  // Config package.json
  /** TODO: maybe addd leanengine support:
   * "leanengine": "^0.4.0",
   * & upload suuport:
   * "multiparty": "^4.1.2"
   */
  const pkg = {
    name: name,
    version: '0.0.0',
    private: true,
    scripts: {
      babel: "babel public/javascripts/src --out-dir public/javascripts/dist",
      start: "npm run babel && node ./bin/www",
      lint: "eslint public/javascripts/src/**",
      build: "npm run lint && babel public/javascripts/src --out-dir public/javascripts/dist --source-maps inline --no-comments",
      test: "./node_modules/.bin/mocha --timeout 15000 --reporter spec ./test/*.js"
    },
    dependencies: {
      "co": "^4.6.0",
      "debug": "^2.2.0",
      "jade": "~1.11.0",
      "koa": "^1.1.2",
      "koa-bodyparser": "^2.0.1",
      "koa-json": "^1.1.1",
      "koa-logger": "^1.3.0",
      "koa-onerror": "^1.2.1",
      "koa-router": "^5.3.0",
      "koa-static": "^1.5.2",
      "koa-views": "^3.1.0",
      "mongorito": "^2.0.0",
    },
    devDependencies: {
      "assert": "^1.3.0",
      "babel-core": "^6.7.5",
      "babel-loader": "^6.2.4",
      "babel-polyfill": "^6.7.4",
      "babel-preset-es2015": "^6.6.0",
      "babel-preset-stage-0": "^6.5.0",
      "eslint": "^2.1.0",
      "eslint-config-standard": "^5.1.0",
      "eslint-plugin-promise": "^1.0.8",
      "eslint-plugin-standard": "^1.3.2",
      "mocha": "2.3.1",
    }
  }

  write(path + '/package.json', JSON.stringify(pkg, null, 2))
  write(path + '/app.js', app)

  mkdir(path + '/bin', () => {
    www = www.replace('{name}', name)
    write(path + '/bin/www', www, 0755)

    complete()
  })

  // other configs.include babel eslint and gitignore
  write(path + '/.babelrc', loadTemplate('babelrc'))
  write(path + '/.eslintrc', loadTemplate('eslintrc'))
  write(path + '/.gitignore', loadTemplate('gitignore'))

  complete()
}

function exit (code) {
  function done () {
    if (!(draining--)) process.exit(code)
  }

  const draining = 0
  const streams = [process.stdout, process.stderr]

  exit.exited = true

  streams.forEach((stream) => {
    draining += 1
    stream.write('', done)
  })

  done()
}

function main () {
  const destinationPath = program.args.shift() || '.'
  const appName = path.basename(path.resolve(destinationPath))

  // Default template is jade
  program.template = 'jade'

  emptyDirectory(destinationPath, (empty) => {
    if (empty) {
      createApp(appName, destinationPath)
    } else {
      confirm('Target directory is not empty, continue will empty that directory, ok? [y/n] ', (ok) => {
        if (ok) {
          process.stdin.destroy()
          createApp(appName, destinationPath)
        } else {
          console.error('Something wrong - -')
          exit(1);
        }
      })
    }
  })
}
